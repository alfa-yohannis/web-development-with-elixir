\documentclass[aspectratio=169, table]{beamer}

\usepackage[utf8]{inputenc}
\usepackage{listings} 

\usetheme{Pradita}

\subtitle{IF140303-Web Application Development}

\title{\LARGE{Session-02:\\ Elixir's pattern matching }
	\vspace{20pt}}
\date[Serial]{\scriptsize {PRU/SPMI/FR-BM-18/0222}}
\author[Pradita]{\small{\textbf{Alfa Yohannis}}}

\lstdefinelanguage{Elixir} {
	keywords={def, defmodule, do, end, for, if, else, true, false},
	basicstyle=\ttfamily\small,
	keywordstyle=\color{blue}\bfseries,
	ndkeywords={@moduledoc, iex, Enum, @doc},
	ndkeywordstyle=\color{purple}\bfseries,
	sensitive=true,
	commentstyle=\color{gray},
	stringstyle=\color{red},
	numbers=left,
	numberstyle=\tiny\color{gray},
	breaklines=true,
	frame=lines,
	backgroundcolor=\color{lightgray!10},
	tabsize=2,
	comment=[l]{\#},
	morecomment=[s]{/*}{*/},
	commentstyle=\color{gray}\ttfamily,
	stringstyle=\color{purple}\ttfamily,
	showstringspaces=false
}

\begin{document}
	
	\frame{\titlepage}
	
	\begin{frame}
		\frametitle{Recap: Function Documentation and Arity}
		\begin{itemize}
			\item In Elixir, the function name followed by a slash and number indicates the arity, or the number of arguments the function takes.
			\item \texttt{function name/number} notation helps in distinguishing between different functions with the same name but different arities.
			\item Example: \texttt{greet/0}, \texttt{generate\_pool/0}, \texttt{contains?/2}, \texttt{distribute/2}.
		\end{itemize}
	\end{frame}
	
	\begin{frame}
		\frametitle{Introduction to Advanced Concepts}
		\begin{itemize}
			\item This session covers more advanced Elixir concepts within the context of a Lottery module.
			\item Weâ€™ll explore how to save and load data, and how to create more complex operations like creating a randomized hand from the lottery pool.
		\end{itemize}
	\end{frame}
	
	\begin{frame}[fragile]
		\frametitle{Saving the Lottery Pool to a File}
		\begin{lstlisting}[language=Elixir]
			def save_pool(pool, filename) do
			binary = :erlang.term_to_binary(pool)
			File.write(filename, binary)
			end
		\end{lstlisting}
		\begin{itemize}
			\item \texttt{save\_pool/2} saves the lottery pool to a specified file.
			\item Converts the pool to binary using \texttt{:erlang.term\_to\_binary/1}.
			\item Writes the binary data to the file with \texttt{File.write/2}.
		\end{itemize}
	\end{frame}
	
	\begin{frame}[fragile]
		\frametitle{Loading the Lottery Pool from a File}
		\begin{lstlisting}[language=Elixir]
			def load_pool(filename) do
			case File.read(filename) do
			{:ok, binary} -> :erlang.binary_to_term(binary)
			{:error, _reason} -> "That file does not exist"
			end
			end
		\end{lstlisting}
		\begin{itemize}
			\item \texttt{load\_pool/1} loads the lottery pool from a specified file.
			\item Reads the binary data from the file using \texttt{File.read/1}.
			\item Converts the binary data back into the original list with \texttt{:erlang.binary\_to\_term/1}.
		\end{itemize}
	\end{frame}
	
	\begin{frame}[fragile]
		\frametitle{Creating a Randomized Hand}
		\begin{lstlisting}[language=Elixir]
			def create_hand(draw_size) do
			Lottery.generate_pool()
			|> Lottery.randomize()
			|> Lottery.distribute(draw_size)
			end
		\end{lstlisting}
		\begin{itemize}
			\item \texttt{create\_hand/1} generates a randomized hand from the lottery pool.
			\item Combines multiple operations: generating the pool, shuffling, and distributing.
			\item Utilizes the pipe operator (\texttt{|>}) for chaining functions together.
		\end{itemize}
	\end{frame}
	
	\begin{frame}
		\frametitle{The Pipe Operator (\texttt{|>})}
		\begin{itemize}
			\item The pipe operator allows for chaining function calls in a clear and readable manner.
			\item It passes the result of the expression on the left as the first argument to the function on the right.
			\item Enhances code readability, especially when working with multiple transformations or operations.
		\end{itemize}
	\end{frame}
	
	\begin{frame}
		\frametitle{Recap: Functional Programming Concepts}
		\begin{itemize}
			\item Functional programming emphasizes immutability, pure functions, and higher-order functions.
			\item Functions can be passed as arguments, returned as results, and assigned to variables.
			\item Recursion is preferred over loops for iteration.
		\end{itemize}
	\end{frame}
	
	\begin{frame}
		\frametitle{Summary}
		\begin{itemize}
			\item We explored advanced Elixir concepts by continuing the development of the \texttt{Lottery} module.
			\item We learned how to save and load data, create a randomized hand, and utilize the pipe operator.
			\item These concepts further enhance our understanding of functional programming and Elixir's capabilities.
		\end{itemize}
	\end{frame}
	
\end{document}


with the same format as the one I provide before, please make a brand new latex beamer ppt for 14th lessons containing, if the frame got too full, please separate the content to other frame too. I think the average frame should only contain 11 rows max and for the frametitle it can only contain 32 character, if its too long please do: \shortstack{first line \\ second line}. preferably I want the content to be a bit more in detail, for example when I ask for explanations, I prefer it to not only give short description, but instead make it a bit more detailed:

1. Explain what changes happend in phoenix v1.3 and that v1.2 are easier to learn. Explain how to generate new project folder in phoenix v1.3 Explain how the directory structure update works

2. Explain CLI command changes in phoenix v1.3. especially a lot of command with phoenix are changed to phx

3. Explain now clients assets are separated to different folder, how before its inside web folder and now its a standalone folder named assets. Now the assets folder have static folder.

4. Explain that now web folder got splits into 2 which is update and update_web, explain what web folder contains in phoenix v1.2. Explain what update and update_web folder contains and what each of it does in phoenix v1.3, and what differentiate it with phoenix v1.2 such as model folder in update separated from controllers, etc.

5. Explain what context is in phoenix v1.3. explain that the possible contexts in our discuss applications are accounts and posts, where accounts corresponds to everything related to users and posts corresponds to everything related to topics and comments. and how the phoenix v1.3 make it harder than v1.2, one of it are how we will linked a couple different contexts.

6. Explain these 3 commands in details, such as what it generated, where the generated stuff be, what it contains, and what it is used for: mix phx.gen.html Accounts User users email:string, mix phx.gen.html Discussions Topic topics title"string, mix phx.gen.html Discussions Comment comments content:string.

7. mention that now its not referred model anymore but is now referred as schema.